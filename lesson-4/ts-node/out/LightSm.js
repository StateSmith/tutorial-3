"use strict";
// Autogenerated with StateSmith 0.15.1+0972c4996e63923533225bfed0196abcb8a38419.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightSm = exports.Vars = exports.StateIdCount = exports.StateId = exports.EventIdCount = exports.EventId = void 0;
var LightSmBase_1 = require("./LightSmBase");
// Enum for EventId
var EventId;
(function (EventId) {
    EventId[EventId["DIM"] = 0] = "DIM";
    EventId[EventId["INC"] = 1] = "INC";
    EventId[EventId["OFF"] = 2] = "OFF";
})(EventId || (exports.EventId = EventId = {}));
exports.EventIdCount = 3;
// Enum for StateId
var StateId;
(function (StateId) {
    StateId[StateId["ROOT"] = 0] = "ROOT";
    StateId[StateId["OFF"] = 1] = "OFF";
    StateId[StateId["ON_GROUP"] = 2] = "ON_GROUP";
    StateId[StateId["ON_HOT"] = 3] = "ON_HOT";
    StateId[StateId["ON1"] = 4] = "ON1";
    StateId[StateId["ON2"] = 5] = "ON2";
})(StateId || (exports.StateId = StateId = {}));
exports.StateIdCount = 6;
var Vars = /** @class */ (function () {
    function Vars() {
        this.count = 0;
    }
    return Vars;
}());
exports.Vars = Vars;
// Generated state machine class
var LightSm = /** @class */ (function (_super) {
    __extends(LightSm, _super);
    function LightSm() {
        var _this = _super.call(this) || this;
        _this.vars = new Vars();
        return _this;
    }
    // Starts the state machine
    LightSm.prototype.start = function () {
        this.ROOT_enter();
        this.OFF_enter();
    };
    // Dispatches an event to the state machine
    LightSm.prototype.dispatchEvent = function (eventId) {
        switch (this.stateId) {
            case StateId.OFF:
                switch (eventId) {
                    case EventId.INC:
                        this.OFF_inc();
                        break;
                }
                break;
            case StateId.ON_GROUP:
                if (eventId === EventId.OFF)
                    this.ON_GROUP_off();
                break;
            case StateId.ON_HOT:
                if (eventId === EventId.DIM)
                    this.ON_HOT_dim();
                if (eventId === EventId.OFF)
                    this.ON_GROUP_off();
                break;
            case StateId.ON1:
                if (eventId === EventId.INC)
                    this.ON1_inc();
                if (eventId === EventId.DIM)
                    this.ON1_dim();
                if (eventId === EventId.OFF)
                    this.ON_GROUP_off();
                break;
            case StateId.ON2:
                if (eventId === EventId.INC)
                    this.ON2_inc();
                if (eventId === EventId.DIM)
                    this.ON2_dim();
                if (eventId === EventId.OFF)
                    this.ON_GROUP_off();
                break;
        }
    };
    LightSm.prototype.exitUpToStateHandler = function (desiredState) {
        while (this.stateId !== desiredState) {
            switch (this.stateId) {
                case StateId.OFF:
                    this.OFF_exit();
                    break;
                case StateId.ON_GROUP:
                    this.ON_GROUP_exit();
                    break;
                case StateId.ON_HOT:
                    this.ON_HOT_exit();
                    break;
                case StateId.ON1:
                    this.ON1_exit();
                    break;
                case StateId.ON2:
                    this.ON2_exit();
                    break;
                default: return;
            }
        }
    };
    // Event handlers for state ROOT
    LightSm.prototype.ROOT_enter = function () {
        this.stateId = StateId.ROOT;
    };
    // Event handlers for state OFF
    LightSm.prototype.OFF_enter = function () {
        this.stateId = StateId.OFF;
        console.log("Light is: OFF");
    };
    LightSm.prototype.OFF_exit = function () {
        this.stateId = StateId.ROOT;
    };
    LightSm.prototype.OFF_inc = function () {
        this.OFF_exit();
        this.ON_GROUP_enter();
        this.ON1_enter();
    };
    // Event handlers for state ON_GROUP
    LightSm.prototype.ON_GROUP_enter = function () {
        this.stateId = StateId.ON_GROUP;
    };
    LightSm.prototype.ON_GROUP_exit = function () {
        this.stateId = StateId.ROOT;
    };
    LightSm.prototype.ON_GROUP_off = function () {
        this.exitUpToStateHandler(StateId.ROOT);
        this.OFF_enter();
    };
    // Event handlers for state ON_HOT
    LightSm.prototype.ON_HOT_enter = function () {
        this.stateId = StateId.ON_HOT;
        this.lightRed();
    };
    LightSm.prototype.ON_HOT_exit = function () {
        this.stateId = StateId.ON_GROUP;
    };
    LightSm.prototype.ON_HOT_dim = function () {
        this.ON_HOT_exit();
        this.ON2_enter();
    };
    // Event handlers for state ON1
    LightSm.prototype.ON1_enter = function () {
        this.stateId = StateId.ON1;
        this.lightBlue();
    };
    LightSm.prototype.ON1_exit = function () {
        this.stateId = StateId.ON_GROUP;
    };
    LightSm.prototype.ON1_dim = function () {
        this.exitUpToStateHandler(StateId.ROOT);
        this.OFF_enter();
    };
    LightSm.prototype.ON1_inc = function () {
        this.ON1_exit();
        this.ON2_enter();
    };
    // Event handlers for state ON2
    LightSm.prototype.ON2_enter = function () {
        this.stateId = StateId.ON2;
        this.lightYellow();
        this.vars.count = 0;
    };
    LightSm.prototype.ON2_exit = function () {
        this.stateId = StateId.ON_GROUP;
    };
    LightSm.prototype.ON2_dim = function () {
        this.ON2_exit();
        this.ON1_enter();
    };
    LightSm.prototype.ON2_inc = function () {
        this.vars.count++;
        console.log("    Count: ".concat(this.vars.count));
        if (this.vars.count >= 3) {
            this.ON2_exit();
            this.ON_HOT_enter();
        }
    };
    // Utility methods
    LightSm.stateIdToString = function (id) {
        switch (id) {
            case StateId.ROOT: return "ROOT";
            case StateId.OFF: return "OFF";
            case StateId.ON_GROUP: return "ON_GROUP";
            case StateId.ON_HOT: return "ON_HOT";
            case StateId.ON1: return "ON1";
            case StateId.ON2: return "ON2";
            default: return "?";
        }
    };
    LightSm.eventIdToString = function (id) {
        switch (id) {
            case EventId.DIM: return "DIM";
            case EventId.INC: return "INC";
            case EventId.OFF: return "OFF";
            default: return "?";
        }
    };
    return LightSm;
}(LightSmBase_1.LightSmBase));
exports.LightSm = LightSm;
//# sourceMappingURL=LightSm.js.map