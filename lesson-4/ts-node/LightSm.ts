// Autogenerated with StateSmith 0.15.1+0972c4996e63923533225bfed0196abcb8a38419.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

import { LightSmBase } from "./LightSmBase";

// Enum for EventId
export enum EventId {
    DIM = 0,
    INC = 1,
    OFF = 2,
}

export const EventIdCount = 3;

// Enum for StateId
export enum StateId {
    ROOT = 0,
    OFF = 1,
    ON_GROUP = 2,
    ON_HOT = 3,
    ON1 = 4,
    ON2 = 5,
}

export const StateIdCount = 6;

export class Vars {
    public count: number = 0;
}

// Generated state machine class
export class LightSm extends LightSmBase {
    public stateId: StateId;

    public vars: Vars = new Vars();

    constructor() {
        super();
    }

    // Starts the state machine
    public start(): void {
        this.ROOT_enter();
        this.OFF_enter();
    }

    // Dispatches an event to the state machine
    public dispatchEvent(eventId: EventId): void {
        switch (this.stateId) {
            case StateId.OFF:
                switch (eventId){
                    case EventId.INC:
                        this.OFF_inc();
                        break;
                }
                break;
            case StateId.ON_GROUP:
                if (eventId === EventId.OFF) this.ON_GROUP_off();
                break;
            case StateId.ON_HOT:
                if (eventId === EventId.DIM) this.ON_HOT_dim();
                if (eventId === EventId.OFF) this.ON_GROUP_off();
                break;
            case StateId.ON1:
                if (eventId === EventId.INC) this.ON1_inc();
                if (eventId === EventId.DIM) this.ON1_dim();
                if (eventId === EventId.OFF) this.ON_GROUP_off();
                break;
            case StateId.ON2:
                if (eventId === EventId.INC) this.ON2_inc();
                if (eventId === EventId.DIM) this.ON2_dim();
                if (eventId === EventId.OFF) this.ON_GROUP_off();
                break;
        }
    }

    private exitUpToStateHandler(desiredState: StateId): void {
        while (this.stateId !== desiredState) {
            switch (this.stateId) {
                case StateId.OFF: this.OFF_exit(); break;
                case StateId.ON_GROUP: this.ON_GROUP_exit(); break;
                case StateId.ON_HOT: this.ON_HOT_exit(); break;
                case StateId.ON1: this.ON1_exit(); break;
                case StateId.ON2: this.ON2_exit(); break;
                default: return;
            }
        }
    }

    // Event handlers for state ROOT
    private ROOT_enter(): void {
        this.stateId = StateId.ROOT;
    }

    // Event handlers for state OFF
    private OFF_enter(): void {
        this.stateId = StateId.OFF;
        console.log("Light is: OFF");
    }

    private OFF_exit(): void {
        this.stateId = StateId.ROOT;
    }

    private OFF_inc(): void {
        this.OFF_exit();
        this.ON_GROUP_enter();
        this.ON1_enter();
    }

    // Event handlers for state ON_GROUP
    private ON_GROUP_enter(): void {
        this.stateId = StateId.ON_GROUP;
    }

    private ON_GROUP_exit(): void {
        this.stateId = StateId.ROOT;
    }

    private ON_GROUP_off(): void {
        this.exitUpToStateHandler(StateId.ROOT);
        this.OFF_enter();
    }

    // Event handlers for state ON_HOT
    private ON_HOT_enter(): void {
        this.stateId = StateId.ON_HOT;
        this.lightRed();
    }

    private ON_HOT_exit(): void {
        this.stateId = StateId.ON_GROUP;
    }

    private ON_HOT_dim(): void {
        this.ON_HOT_exit();
        this.ON2_enter();
    }

    // Event handlers for state ON1
    private ON1_enter(): void {
        this.stateId = StateId.ON1;
        this.lightBlue();
    }

    private ON1_exit(): void {
        this.stateId = StateId.ON_GROUP;
    }

    private ON1_dim(): void {
        this.exitUpToStateHandler(StateId.ROOT);
        this.OFF_enter();
    }

    private ON1_inc(): void {
        this.ON1_exit();
        this.ON2_enter();
    }

    // Event handlers for state ON2
    private ON2_enter(): void {
        this.stateId = StateId.ON2;
        this.lightYellow();
        this.vars.count = 0;
    }

    private ON2_exit(): void {
        this.stateId = StateId.ON_GROUP;
    }

    private ON2_dim(): void {
        this.ON2_exit();
        this.ON1_enter();
    }

    private ON2_inc(): void {
        this.vars.count++;
        console.log(`    Count: ${this.vars.count}`);
        if (this.vars.count >= 3) {
            this.ON2_exit();
            this.ON_HOT_enter();
        }
    }

    // Utility methods
    public static stateIdToString(id: StateId): string {
        switch (id) {
            case StateId.ROOT: return "ROOT";
            case StateId.OFF: return "OFF";
            case StateId.ON_GROUP: return "ON_GROUP";
            case StateId.ON_HOT: return "ON_HOT";
            case StateId.ON1: return "ON1";
            case StateId.ON2: return "ON2";
            default: return "?";
        }
    }

    public static eventIdToString(id: EventId): string {
        switch (id) {
            case EventId.DIM: return "DIM";
            case EventId.INC: return "INC";
            case EventId.OFF: return "OFF";
            default: return "?";
        }
    }
}
