// Autogenerated with StateSmith 0.17.0+b2b9f4338d0406e391502823cb5cfc243fb01849.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// any text you put in IRenderConfig.FileTop (like this comment) will be written to the generated .h file
import { LightSmBase } from "./LightSmBase";

export enum EventId
{
    DIM = 0,
    INC = 1,
    OFF = 2,
}

export const EventIdCount: number = 3;

export enum StateId
{
    ROOT = 0,
    OFF = 1,
    ON_GROUP = 2,
    ON_HOT = 3,
    ON1 = 4,
    ON2 = 5,
}

export const StateIdCount: number = 6;

// State machine variables. Can be used for inputs, outputs, user variables...
export class Vars
{
    public count: number = 0; // Variable for state machine. Must end with a semicolon for TypeScript.
}

// Generated state machine
export class LightSm extends LightSmBase
{
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    public stateId: StateId;
    
    // Variables. Can be used for inputs, outputs, user variables...
    public vars: Vars = new Vars();
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    public LightSm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    public start(): void 
    {
        this.ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(OFF)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `OFF`.
                this.OFF_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    public dispatchEvent(eventId: EventId): void 
    {
        switch (this.stateId)
        {
            // STATE: LightSm
            case StateId.ROOT:
                // No events handled by this state (or its ancestors).
                break;
            
            // STATE: OFF
            case StateId.OFF:
                switch (eventId)
                {
                    case EventId.INC: this.OFF_inc(); break;
                }
                break;
            
            // STATE: ON_GROUP
            case StateId.ON_GROUP:
                switch (eventId)
                {
                    case EventId.OFF: this.ON_GROUP_off(); break;
                }
                break;
            
            // STATE: ON_HOT
            case StateId.ON_HOT:
                switch (eventId)
                {
                    case EventId.DIM: this.ON_HOT_dim(); break;
                    case EventId.OFF: this.ON_GROUP_off(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: ON1
            case StateId.ON1:
                switch (eventId)
                {
                    case EventId.INC: this.ON1_inc(); break;
                    case EventId.DIM: this.ON1_dim(); break;
                    case EventId.OFF: this.ON_GROUP_off(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: ON2
            case StateId.ON2:
                switch (eventId)
                {
                    case EventId.INC: this.ON2_inc(); break;
                    case EventId.DIM: this.ON2_dim(); break;
                    case EventId.OFF: this.ON_GROUP_off(); break; // First ancestor handler for this event
                }
                break;
        }
        
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    private exitUpToStateHandler(desiredState: StateId): void 
    {
        while (this.stateId != desiredState)
        {
            switch (this.stateId)
            {
                case StateId.OFF: this.OFF_exit(); break;
                
                case StateId.ON_GROUP: this.ON_GROUP_exit(); break;
                
                case StateId.ON_HOT: this.ON_HOT_exit(); break;
                
                case StateId.ON1: this.ON1_exit(); break;
                
                case StateId.ON2: this.ON2_exit(); break;
                
                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private ROOT_enter(): void 
    {
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OFF
    ////////////////////////////////////////////////////////////////////////////////
    
    private OFF_enter(): void 
    {
        this.stateId = StateId.OFF;
        
        // OFF behavior
        // uml: enter / { console.log("Light is: OFF"); }
        {
            // Step 1: execute action `console.log("Light is: OFF");`
            console.log("Light is: OFF");
        } // end of behavior for OFF
    }
    
    private OFF_exit(): void 
    {
        this.stateId = StateId.ROOT;
    }
    
    private OFF_inc(): void 
    {
        // OFF behavior
        // uml: INC TransitionTo(ON1)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.OFF_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON1`.
            this.ON_GROUP_enter();
            this.ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for OFF
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON_GROUP
    ////////////////////////////////////////////////////////////////////////////////
    
    private ON_GROUP_enter(): void 
    {
        this.stateId = StateId.ON_GROUP;
    }
    
    private ON_GROUP_exit(): void 
    {
        this.stateId = StateId.ROOT;
    }
    
    private ON_GROUP_off(): void 
    {
        // ON_GROUP behavior
        // uml: OFF TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.exitUpToStateHandler(StateId.ROOT);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            this.OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON_GROUP
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON_HOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private ON_HOT_enter(): void 
    {
        this.stateId = StateId.ON_HOT;
        
        // ON_HOT behavior
        // uml: enter / { this.lightRed(); }
        {
            // Step 1: execute action `this.lightRed();`
            this.lightRed();
        } // end of behavior for ON_HOT
    }
    
    private ON_HOT_exit(): void 
    {
        this.stateId = StateId.ON_GROUP;
    }
    
    private ON_HOT_dim(): void 
    {
        // ON_HOT behavior
        // uml: DIM TransitionTo(ON2)
        {
            // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
            this.ON_HOT_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON2`.
            this.ON2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON_HOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON1
    ////////////////////////////////////////////////////////////////////////////////
    
    private ON1_enter(): void 
    {
        this.stateId = StateId.ON1;
        
        // ON1 behavior
        // uml: enter / { this.lightBlue(); }
        {
            // Step 1: execute action `this.lightBlue();`
            this.lightBlue();
        } // end of behavior for ON1
    }
    
    private ON1_exit(): void 
    {
        this.stateId = StateId.ON_GROUP;
    }
    
    private ON1_dim(): void 
    {
        // ON1 behavior
        // uml: DIM TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.exitUpToStateHandler(StateId.ROOT);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            this.OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON1
        
        // No ancestor handles this event.
    }
    
    private ON1_inc(): void 
    {
        // ON1 behavior
        // uml: INC TransitionTo(ON2)
        {
            // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
            this.ON1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON2`.
            this.ON2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON2
    ////////////////////////////////////////////////////////////////////////////////
    
    private ON2_enter(): void 
    {
        this.stateId = StateId.ON2;
        
        // ON2 behavior
        // uml: enter / { this.lightYellow(); }
        {
            // Step 1: execute action `this.lightYellow();`
            this.lightYellow();
        } // end of behavior for ON2
        
        // ON2 behavior
        // uml: enter / { count = 0; }
        {
            // Step 1: execute action `count = 0;`
            this.vars.count = 0;
        } // end of behavior for ON2
    }
    
    private ON2_exit(): void 
    {
        this.stateId = StateId.ON_GROUP;
    }
    
    private ON2_dim(): void 
    {
        // ON2 behavior
        // uml: DIM TransitionTo(ON1)
        {
            // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
            this.ON2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON1`.
            this.ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON2
        
        // No ancestor handles this event.
    }
    
    private ON2_inc(): void 
    {
        // ON2 behavior
        // uml: 1. INC / { count++; }
        {
            // Step 1: execute action `count++;`
            this.vars.count++;
        } // end of behavior for ON2
        
        // ON2 behavior
        // uml: 2. INC / { console.log("count var: " + count); }
        {
            // Step 1: execute action `console.log("count var: " + count);`
            console.log("count var: " + this.vars.count);
        } // end of behavior for ON2
        
        // ON2 behavior
        // uml: INC [count >= 3] TransitionTo(ON_HOT)
        if (this.vars.count >= 3)
        {
            // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
            this.ON2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON_HOT`.
            this.ON_HOT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON2
        
        // No ancestor handles this event.
    }
    
    // Thread safe.
    public static stateIdToString(id: StateId): string 
    {
        switch (id)
        {
            case StateId.ROOT: return "ROOT";
            case StateId.OFF: return "OFF";
            case StateId.ON_GROUP: return "ON_GROUP";
            case StateId.ON_HOT: return "ON_HOT";
            case StateId.ON1: return "ON1";
            case StateId.ON2: return "ON2";
            default: return "?";
        }
    }
    
    // Thread safe.
    public static eventIdToString(id: EventId): string 
    {
        switch (id)
        {
            case EventId.DIM: return "DIM";
            case EventId.INC: return "INC";
            case EventId.OFF: return "OFF";
            default: return "?";
        }
    }
}
