// Autogenerated with StateSmith 0.16.0+33b97786003f067f9b746ce5870937de5ee23d56.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Whatever you put in this `FileTop` section will end up 
// being printed at the top of every generated code file.

#include "LightSm.h"
#include <stdbool.h> // required for `consume_event` flag
#include <string.h> // for memset
#include "Light.h" // user include. required for Light functions.
#include <iostream> // user include. required for printf.





// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
LightSm::LightSm()
{
    std::cout << "CONSTRUCTED!!!\n";
}

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void LightSm::start()
{
    ROOT_enter();
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void LightSm::dispatch_event(EventId event_id)
{
    switch (state_id)
    {
        // STATE: LightSm
        case StateId_ROOT:
            // No events handled by this state (or its ancestors).
            break;
        
        // STATE: OFF
        case StateId_OFF:
            switch (event_id)
            {
                case EventId_INC: OFF_inc(); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: ON_GROUP
        case StateId_ON_GROUP:
            switch (event_id)
            {
                case EventId_OFF: ON_GROUP_off(); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: ON_HOT
        case StateId_ON_HOT:
            switch (event_id)
            {
                case EventId_DIM: ON_HOT_dim(); break;
                case EventId_OFF: ON_GROUP_off(); break; // First ancestor handler for this event
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: ON1
        case StateId_ON1:
            switch (event_id)
            {
                case EventId_INC: ON1_inc(); break;
                case EventId_DIM: ON1_dim(); break;
                case EventId_OFF: ON_GROUP_off(); break; // First ancestor handler for this event
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: ON2
        case StateId_ON2:
            switch (event_id)
            {
                case EventId_INC: ON2_inc(); break;
                case EventId_DIM: ON2_dim(); break;
                case EventId_OFF: ON_GROUP_off(); break; // First ancestor handler for this event
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
    }
    
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
void LightSm::exit_up_to_state_handler(StateId desired_state)
{
    while (state_id != desired_state)
    {
        switch (state_id)
        {
            case StateId_OFF: OFF_exit(); break;
            
            case StateId_ON_GROUP: ON_GROUP_exit(); break;
            
            case StateId_ON_HOT: ON_HOT_exit(); break;
            
            case StateId_ON1: ON1_exit(); break;
            
            case StateId_ON2: ON2_exit(); break;
            
            default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

void LightSm::ROOT_enter()
{
    state_id = StateId_ROOT;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state OFF
////////////////////////////////////////////////////////////////////////////////

void LightSm::OFF_enter()
{
    state_id = StateId_OFF;
    
    // OFF behavior
    // uml: enter / { std::cout << "Light is OFF\n"; }
    {
        // Step 1: execute action `std::cout << "Light is OFF\n";`
        std::cout << "Light is OFF\n";
    } // end of behavior for OFF
}

void LightSm::OFF_exit()
{
    state_id = StateId_ROOT;
}

void LightSm::OFF_inc()
{
    // OFF behavior
    // uml: INC TransitionTo(ON1)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        OFF_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ON1`.
        ON_GROUP_enter();
        ON1_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for OFF
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ON_GROUP
////////////////////////////////////////////////////////////////////////////////

void LightSm::ON_GROUP_enter()
{
    state_id = StateId_ON_GROUP;
}

void LightSm::ON_GROUP_exit()
{
    state_id = StateId_ROOT;
}

void LightSm::ON_GROUP_off()
{
    // ON_GROUP behavior
    // uml: OFF TransitionTo(OFF)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        exit_up_to_state_handler(StateId_ROOT);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `OFF`.
        OFF_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for ON_GROUP
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ON_HOT
////////////////////////////////////////////////////////////////////////////////

void LightSm::ON_HOT_enter()
{
    state_id = StateId_ON_HOT;
    
    // ON_HOT behavior
    // uml: enter / { Light::red(); }
    {
        // Step 1: execute action `Light::red();`
        Light::red();
    } // end of behavior for ON_HOT
}

void LightSm::ON_HOT_exit()
{
    state_id = StateId_ON_GROUP;
}

void LightSm::ON_HOT_dim()
{
    // ON_HOT behavior
    // uml: DIM TransitionTo(ON2)
    {
        // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
        ON_HOT_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ON2`.
        ON2_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for ON_HOT
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ON1
////////////////////////////////////////////////////////////////////////////////

void LightSm::ON1_enter()
{
    state_id = StateId_ON1;
    
    // ON1 behavior
    // uml: enter / { Light::blue(); }
    {
        // Step 1: execute action `Light::blue();`
        Light::blue();
    } // end of behavior for ON1
}

void LightSm::ON1_exit()
{
    state_id = StateId_ON_GROUP;
}

void LightSm::ON1_dim()
{
    // ON1 behavior
    // uml: DIM TransitionTo(OFF)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        exit_up_to_state_handler(StateId_ROOT);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `OFF`.
        OFF_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for ON1
    
    // No ancestor handles this event.
}

void LightSm::ON1_inc()
{
    // ON1 behavior
    // uml: INC TransitionTo(ON2)
    {
        // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
        ON1_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ON2`.
        ON2_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for ON1
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ON2
////////////////////////////////////////////////////////////////////////////////

void LightSm::ON2_enter()
{
    state_id = StateId_ON2;
    
    // ON2 behavior
    // uml: enter / { Light::yellow(); }
    {
        // Step 1: execute action `Light::yellow();`
        Light::yellow();
    } // end of behavior for ON2
    
    // ON2 behavior
    // uml: enter / { count = 0; }
    {
        // Step 1: execute action `count = 0;`
        vars.count = 0;
    } // end of behavior for ON2
}

void LightSm::ON2_exit()
{
    state_id = StateId_ON_GROUP;
}

void LightSm::ON2_dim()
{
    // ON2 behavior
    // uml: DIM TransitionTo(ON1)
    {
        // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
        ON2_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ON1`.
        ON1_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for ON2
    
    // No ancestor handles this event.
}

void LightSm::ON2_inc()
{
    // ON2 behavior
    // uml: 1. INC / { count++; }
    {
        // Step 1: execute action `count++;`
        vars.count++;
    } // end of behavior for ON2
    
    // ON2 behavior
    // uml: 2. INC / { std::cout << "    Count: " << count << std::endl; }
    {
        // Step 1: execute action `std::cout << "    Count: " << count << std::endl;`
        std::cout << "    Count: " << vars.count << std::endl;
    } // end of behavior for ON2
    
    // ON2 behavior
    // uml: INC [count >= 3] TransitionTo(ON_HOT)
    if (vars.count >= 3)
    {
        // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
        ON2_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ON_HOT`.
        ON_HOT_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for ON2
    
    // No ancestor handles this event.
}

// Thread safe.
char const * LightSm::state_id_to_string(StateId id)
{
    switch (id)
    {
        case StateId_ROOT: return "ROOT";
        case StateId_OFF: return "OFF";
        case StateId_ON_GROUP: return "ON_GROUP";
        case StateId_ON_HOT: return "ON_HOT";
        case StateId_ON1: return "ON1";
        case StateId_ON2: return "ON2";
        default: return "?";
    }
}

// Thread safe.
char const * LightSm::event_id_to_string(EventId id)
{
    switch (id)
    {
        case EventId_DIM: return "DIM";
        case EventId_INC: return "INC";
        case EventId_OFF: return "OFF";
        default: return "?";
    }
}
