// Autogenerated with StateSmith 0.16.0+33b97786003f067f9b746ce5870937de5ee23d56.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Whatever you put in this `FileTop` section will end up 
// being printed at the top of every generated code file.

#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/issues/112
#include <stdint.h>
// any includes you want in the header file go here


// Generated state machine
class LightSm 
{
public:

    enum EventId
    {
        EventId_DIM = 0,
        EventId_INC = 1,
        EventId_OFF = 2
    };

    enum
    {
        EventIdCount = 3
    };

    enum StateId
    {
        StateId_ROOT = 0,
        StateId_OFF = 1,
        StateId_ON_GROUP = 2,
        StateId_ON_HOT = 3,
        StateId_ON1 = 4,
        StateId_ON2 = 5
    };

    enum
    {
        StateIdCount = 6
    };

    // State machine variables. Can be used for inputs, outputs, user variables...
    struct Vars
    {
        uint16_t count; // this var can be referenced in diagram
    };

    // Used internally by state machine. Feel free to inspect, but don't modify.
    StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    Vars vars;

    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    LightSm();

    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void start();

    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `event_id` parameter is valid.
    void dispatch_event(EventId event_id);

    // Thread safe.
    static char const * state_id_to_string(StateId id);

    // Thread safe.
    static char const * event_id_to_string(EventId id);

private:
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void exit_up_to_state_handler(StateId desired_state);
    void ROOT_enter();
    void OFF_enter();
    void OFF_exit();
    void OFF_inc();
    void ON_GROUP_enter();
    void ON_GROUP_exit();
    void ON_GROUP_off();
    void ON_HOT_enter();
    void ON_HOT_exit();
    void ON_HOT_dim();
    void ON1_enter();
    void ON1_exit();
    void ON1_dim();
    void ON1_inc();
    void ON2_enter();
    void ON2_exit();
    void ON2_dim();
    void ON2_inc();
};

