@startuml LightSm
scale 1.25

' //////////////////////// STATE ORGANIZATION ///////////////////////
' Note: StateSmith treats state names and events as case insensitive.
' More info: https://github.com/StateSmith/StateSmith/wiki/PlantUML

state OFF
state ON_GROUP {
    state ON1
    state ON2
    state ON_HOT
}

[*] -> OFF

' ///////////////////////// STATE HANDLERS /////////////////////////
' Syntax: https://github.com/StateSmith/StateSmith/wiki/Behaviors

OFF: enter / std::cout << "Light is OFF\\n";
' >>> NOTE the extra escape in `\\n` above. This is required for PlantUML.
OFF --> ON1: INC

ON_GROUP --> OFF : OFF

ON1: enter / blue();
ON1 --> ON2: INC
ON1 --> OFF: DIM

ON2: enter / yellow();
ON2: enter / count = 0;
ON2: 1. INC / count++;
ON2: 2. INC / std::cout << "vars.count: " << count << '\\n';
' >>> NOTE the extra escape in `\\n` above for PlantUML
ON2 --> ON_HOT: INC [count >= 3]
ON2 --> ON1: DIM

ON_HOT: enter / red();
ON_HOT --> ON2: DIM


' //////////////////////// StateSmith config ////////////////////////
' The below special comment block sets the StateSmith configuration.
' More info: https://github.com/StateSmith/StateSmith/issues/335

/'! $CONFIG : toml

[RenderConfig]
FileTop = """
    // Whatever you put in this `FileTop` section will end up 
    // being printed at the top of every generated code file.
    """
# we get the `count` variable from the base class, but we could
# also have used `AutoExpandedVars` to declare it here.

[RenderConfig.Cpp]
HFileExtension = ".h"
# IncludeGuardLabel = "{FILENAME}_H"
# NameSpace = "MyNamespace"
BaseClassCode = "public LightSmBase"
HFileIncludes = """
    #include "LightSmBase.h" // user include. required for Light functions.
    """
CFileIncludes = """
    #include <iostream> // user include. required for printing action code.
    """

# More Cpp settings are available. See docs.

[SmRunnerSettings]
transpilerId = "Cpp"
'/
@enduml